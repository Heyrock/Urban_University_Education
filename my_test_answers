1.1 срезы строк

example = 'Топинамбур'
print('ОТВЕТЫ НА ЗАДАНИЕ\n')
print(f'Строка: "{example}"\n')
print('первый символ строки:\n' + example[0] + '\n')
print('последний символ строки:\n' + example[-1] + '\n')
print('вторая половина строки:\n' + example[(-len(example) // 2):] + '\n')
print('строка наоборот:\n' + example[::-1] + '\n')
print('каждый второй символ строки:\n' + example[1::2] + '\n')

-------------------------------------------

1.2 переменные

number_of_homework_tasks = 12
hours_spent = 1.5
name_of_course = 'Python'
time_per_task = hours_spent / number_of_homework_tasks

print(f'Курс: {name_of_course}, всего задач: {number_of_homework_tasks}, затрачено часов: {hours_spent}, '
      f'среднее время выполнения {time_per_task} часа.')


----------------------------------------------
# 1.3 Практическая работа по уроку "Динамическая типизация"
#
# Цель: Написать программу на языке Python, используя Pycharm, для
# демонстрации динамической типизации.
#
# 1. В проекте, где вы решаете домашние задания, создайте модуль 'module_1_3.py'
# и напишите весь код в нём.
#
# 2. Создайте переменные разных типов данных:
#   - Создайте переменную name и присвойте ей значение вашего имени (строка).
#   - Выведите значение переменной name на экран.
#   - Создайте переменную age и присвойте ей значение вашего возраста (целое число).
#   - Выведите значение переменной age на экран.
#   - Перезапишите в age текущее значение переменной age + новое.
#
# Как неверно (просто перезапись на новое число):
#
# a = 15
# a = 17
#
#   - Выведите измененное значение переменной age на экран.
#   - Создайте переменную is_student и присвойте ей значение True
#   (логическое значение).
#   - Выведите значение переменной is_student на экран.
#
# Примечания:
#
# - Для вывода значений на экран используйте функцию print().
# - Обратите внимание на использование разных типов данных и возможности
# их изменения.
#
# Пример результата выполнения программы:
#
# Name: John
# Age: 25
# New Age: 26
# Is Student: True

name = 'Евгений'
print(f'Имя: {name}')
age = 46
print(f'Старый возраст: {age}')
age += 1
print(f'Новый возраст: {age}')
is_student = True
print(f'Являюсь студентом = {is_student}')

----------------------------------------------
# 1.4 Практическая работа по уроку "Организация программ и методы строк"
#
# Цель: Написать программу на языке Python с использованием Pycharm
# для работы с методами строк и организации программ.
#
# 1. В проекте, где вы решаете домашние задания, создайте модуль 'module_1_4.py'
# и напишите весь код в нём.
#
# 2. Организуйте программу:
# Создайте переменную my_string и присвойте ей значение строки с произвольным
# текстом (функция input()).
# Вывести количество символов введённого текста
#
# 3. Работа с методами строк:
#
# Используя методы строк, выполните следующие действия:
#
# Выведите строку my_string в верхнем регистре.
# Выведите строку my_string в нижнем регистре.
# Измените строку my_string, удалив все пробелы.
# Выведите первый символ строки my_string.
# Выведите последний символ строки my_string.
# Примечания:
#
# Для вывода значений на экран используйте функцию print().
# Для вызова методов строк используйте операцию точки '.'.
# Дополнительно о всех методах строк можно узнать здесь.
# Пример результата выполнения программы:
#
# Код:
# name = input()
# print(name.upper())
#
# Ввод в консоль:
# Urban
#
# Вывод на консоль:
# URBAN

my_string = input('Введите произвольный текст: ')
print()
length = len(my_string)
print(f'Количество знаков во введенном тексте: {length}')
print(f'Текст в верхнем регистре - "{my_string.upper()}"')
print(f'Текст в нижнем регистре - "{my_string.lower()}"')
print(f'Текст без пробелов - "{my_string.replace(" ", "")}"')
print(f'Первый символ текста - "{my_string[0]}"')
print(f'Последний символ текста - "{my_string[-1]}"')

----------------------------------------------
1.5 Кортежи

# Цель:
#
# Написать программу на языке Python, используя Pycharm, для работы с
# неизменяемыми и изменяемыми объектами.
#
# 1. В проекте, где вы решаете домашние задания, создайте модуль
# 'module_1_5.py' и напишите весь код в нём.
#
# 2. Задайте переменные разных типов данных:
#   - Создайте переменную immutable_var и присвойте ей кортеж из
#   нескольких элементов разных типов данных.
#   - Выполните операции вывода кортежа immutable_var на экран.
#
# 3. Изменение значений переменных:
#   - Попытайтесь изменить элементы кортежа immutable_var.
#   Объясните, почему нельзя изменить значения элементов кортежа.
#
# 4. Создание изменяемых структур данных:
#   - Создайте переменную mutable_list и присвойте ей список из
#    нескольких элементов.
#   - Измените элементы списка mutable_list.
#   - Выведите на экран измененный список mutable_list.
#
import copy

print('Задание 2\n')
immutable_var = 1, '1', 'string', [2, 'string_2'], (4, 5, [6, 'string_3'])
print(immutable_var)

print('\nЗадание 3\n')
new_immutable_var = copy.deepcopy(immutable_var)
new_string = immutable_var[3][1].replace('2', '222')
old_list = immutable_var[3]
new_immutable_var[3][1] = new_string
new_list = new_immutable_var[3]

print(f"Я не могу изменить в списке '{old_list}' кортежа строку '{old_list[1]}' на '{new_string}',\n"
      f"поскольку строки, числа и кортежи неизменяемые.\n\n"
      f"Зато я могу поменять сам список, заменив один элемент на другой\n"
      f"и теперь список выглядит так: '{new_immutable_var[3]}',\n"
      f"а весь кортеж выглядит так:\n"
      f"'{new_immutable_var}'\n\n"
      f"В процессе узнал/вспомнил про новый подводный камень - списки меняются во всех версиях кортежа\n"
      f"Копировать нужно с умом (copy.deepcopy)...")

print('\nЗадание 4\n')

mutable_list = [1, 'a', (2, 3), [4, 5], True]
print(f'Исходный список: {mutable_list}')

mutable_list[0] = 2
mutable_list[1] = mutable_list[1].upper()
mutable_list[2] = mutable_list[2] * 2
mutable_list[3][0], mutable_list[3][1] = mutable_list[3][1], mutable_list[3][0]
mutable_list[4] = not mutable_list[4]

print(f'Измененный список: {mutable_list}')

----------------------------------------------
# 1.6 Практическое задание по теме: "Словари и множества"
#
# Цель: Написать программу на языке Python, используя Pycharm, для работы со
# словарями и множествами.
#
# 1. В проекте, где вы решаете домашние задания, создайте модуль 'module_1_6.py'
# и напишите весь код в нём.
#
# 2. Работа со словарями:
#   - Создайте переменную my_dict и присвойте ей словарь из нескольких пар
#   ключ-значение.
#
# Например: Имя(str)-Год рождения(int).
#   - Выведите на экран словарь my_dict.
#   - Выведите на экран одно значение по существующему ключу,
#   одно по отсутствующему из словаря my_dict без ошибки.
#   - Добавьте ещё две произвольные пары того же формата в словарь my_dict.
#  - Удалите одну из пар в словаре по существующему ключу из словаря
#  my_dict и выведите значение из этой пары на экран.
#   - Выведите на экран словарь my_dict.
#
# 3. Работа с множествами:
#   - Создайте переменную my_set и присвойте ей множество, состоящее из
#   разных типов данных с повторяющимися значениями.
#   - Выведите на экран множество my_set (должны отобразиться только
#   уникальные значения).
#   - Добавьте 2 произвольных элемента в множество my_set, которых ещё нет.
#   - Удалите один любой элемент из множества my_set.
#   - Выведите на экран измененное множество my_set.
#
# Пример результата выполнения программы:
#
# Dict: {'Vasya': 1975, 'Egor': 1999, 'Masha': 2002}
# Existing value: 2002
# Not existing value: None
# Deleted value: 1999
# Modified dictionary: {'Vasya': 1975, 'Kamila': 1981, 'Artem': 1915, 'Masha': 2002}
#
# Set: {1, 'Яблоко', 42.314}
# Modified set: {'Яблоко', 42.314, 13, (5, 6, 1.6)}

print('Задание 2\n')
my_dict = {'Alex': 1975, 'Bob': 1980, 'Candy': 1985}
print(f'Dict: {my_dict}')

exist_val = my_dict['Alex']
print(f"Existing value: {exist_val}")

not_exist_val = my_dict.get('Den', 'Такого имени в словаре нет')
print(f"Not existing value: {not_exist_val}")

my_dict.update(
    {
        'Den': 1990,
        'Eugene': 1995,
    }
)

deleted_value = my_dict.pop('Candy')
print(f'Deleted value: {deleted_value}')

print(f'Modified dictionary: {my_dict}')

print('\nЗадание 3\n')
my_set = {'a', True, 'b', 1, 'c', 2, 'a', True, False, 'c', '1'}
print(f'Set: {my_set}')

my_set.add(3)
my_set.add((1, 2, 3))
my_set.pop()
print(f'Modified set: {my_set}')

----------------------------------------------
# 1.7 Дополнительное практическое задание по модулю: "Базовые структуры данных."
#
# Задание "Средний балл":
#
# Вам необходимо решить задачу из реальной жизни:
# "школьные учителя устали подсчитывать вручную средний балл каждого ученика,
# поэтому вам предстоит автоматизировать этот процесс":
#
# На вход даны следующие данные:
#
# Список: grades = [[5, 3, 3, 5, 4], [2, 2, 2, 3], [4, 5, 5, 2], [4, 4, 3], [5, 5, 5, 4, 5]]
# Множество: students = {'Johnny', 'Bilbo', 'Steve', 'Khendrik', 'Aaron'}
#
# Список grades содержит списки оценок для каждого ученика в алфавитном порядке.
# Например: 'Aaron' - [5, 3, 3, 5, 4]
#
# Множество students содержит неупорядоченную последовательность имён всех учеников
# в классе.
#
# Напишите программу, которая составляет словарь, используя grades и students,
# где ключом будет имя ученика, а значением - его средний балл.
#
# Вывод в консоль:
# {'Aaron': 4.0, 'Bilbo': 2.25, 'Johhny': 4.0, 'Khendrik': 3.6666666666666665, 'Steve': 4.8}


grades = [[5, 3, 3, 5, 4], [2, 2, 2, 3], [4, 5, 5, 2], [4, 4, 3], [5, 5, 5, 4, 5]]
average_grades = [sum(i) / len(i) for i in grades]

students = {'Johnny', 'Bilbo', 'Steve', 'Khendrik', 'Aaron'}
students_alph_order = sorted(list(students))

studets_and_average_grades = dict(zip(students_alph_order, average_grades))
print(studets_and_average_grades)

----------------------------------------------
# модуль_2_5: Цель: закрепить навык написания функций и их вызовов.
#
# Задача "Матрица воплоти":
#
# Напишите функцию get_matrix с тремя параметрами n, m и value, которая будет
# создавать матрицу(вложенный список) размерами n строк и m столбцов,
# заполненную значениями value и возвращать эту матрицу в качестве результата
# работы.
#
# Пункты задачи:
#
# 1. Объявите функцию get_matrix и напишите в ней параметры n, m и value.
# 2. Создайте пустой список matrix внутри функции get_matrix.
# 3. Напишите первый(внешний) цикл for для кол-ва строк матрицы, n повторов.
# 4. В первом цикле добавляйте пустой список в список matrix.
# 5. Напишите второй(внутренний) цикл for для кол-ва столбцов матрицы, m повторов.
# 6. Во втором цикле пополняйте ранее добавленный пустой список значениями value.
# 7. После всех циклов верните значение переменной matrix.
# 8. Выведите на экран(консоль) результат работы функции get_matrix.
#
# Пример результата выполнения функции:
#
# Исходный код:
# result1 = get_matrix(2, 2, 10)
# result2 = get_matrix(3, 5, 42)
# result3 = get_matrix(4, 2, 13)
# print(result1)
# print(result2)
# print(result3)
# Вывод на консоль:
#
# [[10, 10], [10, 10]]
# [[42, 42, 42, 42, 42], [42, 42, 42, 42, 42], [42, 42, 42, 42, 42]]
# [[13, 13], [13, 13], [13, 13], [13, 13]]
#
# Примечания:
# Вложенный список - это строка матрицы, элементы вложенных списков(глубже) -
# это столбцы матрицы.
# В случае передачи аргумента со значением 0 или меньше,
# будет возвращаться пустой список.
def get_matrix(n, m, value):
    matrix = []
    for i in range(n):
        matrix.append([])
        for j in range(m):
            matrix[i].append(value)
    return matrix


result1 = get_matrix(2, 2, 10)
result2 = get_matrix(3, 5, 42)
result3 = get_matrix(4, 2, 13)
print(result1)
print(result2)
print(result3)

----------------------------------------------
# КРЕСТИКИ - НОЛИКИ (собственные) :)

def greeting():
    greeting_msg = 'Добро пожаловать в крестики-нолики!'
    print(greeting_msg)
    print('-' * len(greeting_msg))


def draw_area():
    print()
    for i in area:
        print(*i)
    print()


def announce_user(cur_turn):
    print(f'Ход: {cur_turn}')
    if cur_turn % 2 == 0:
        turn_char = 'O'
        print('Ходят нолики')
    else:
        turn_char = 'X'
        'Ходят крестики'
    return turn_char


def ask_raw_and_column():
    user_row = int(input('Введите номер строки (1, 2, 3): ')) - 1
    user_column = int(input('Введите номер столбца (1, 2, 3): ')) - 1
    return user_row, user_column


def apply_turn(cur_char):
    user_raw, user_column = ask_raw_and_column()
    if area[user_raw][user_column] == '*':
        area[user_raw][user_column] = cur_char
    else:
        print('\nЯчейка уже занята, выберите другую')
        apply_turn(cur_char=cur_char)


def check_winner(cur_char):
    winner_name = 'крестики'
    if cur_char == 'O':
        winner_name = 'нолики'

    for i in area:
        if i[0] == i[1] == i[2] == cur_char:
            print(f'Победили {winner_name}!')
            return False

    for i in range(3):
        if area[0][i] == area[1][i] == area[2][i] == cur_char:
            print(f'Победили {winner_name}!')
            return False

    if area[0][0] == area[1][1] == area[2][2] == cur_char:
        print(f'Победили {winner_name}!')
        return False

    if area[2][0] == area[1][1] == area[0][2] == cur_char:
        print(f'Победили {winner_name}!')
        return False

    return True


area = [
    ['*', '*', '*'],
    ['*', '*', '*'],
    ['*', '*', '*']
]
greeting()
draw_area()
game_continues = True
turn = 1

while game_continues:
    cur_user = announce_user(cur_turn=turn)
    apply_turn(cur_char=cur_user)
    draw_area()
    game_continues = check_winner(cur_char=cur_user)

    turn += 1
    if turn == 10:
        print('Ничья')
        break

----------------------------------------------

----------------------------------------------

----------------------------------------------

----------------------------------------------

----------------------------------------------

----------------------------------------------

----------------------------------------------

