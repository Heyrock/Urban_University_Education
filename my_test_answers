1.1 срезы строк

example = 'Топинамбур'
print('ОТВЕТЫ НА ЗАДАНИЕ\n')
print(f'Строка: "{example}"\n')
print('первый символ строки:\n' + example[0] + '\n')
print('последний символ строки:\n' + example[-1] + '\n')
print('вторая половина строки:\n' + example[(-len(example) // 2):] + '\n')
print('строка наоборот:\n' + example[::-1] + '\n')
print('каждый второй символ строки:\n' + example[1::2] + '\n')

-------------------------------------------

1.2 переменные

number_of_homework_tasks = 12
hours_spent = 1.5
name_of_course = 'Python'
time_per_task = hours_spent / number_of_homework_tasks

print(f'Курс: {name_of_course}, всего задач: {number_of_homework_tasks}, затрачено часов: {hours_spent}, '
      f'среднее время выполнения {time_per_task} часа.')


----------------------------------------------
# 1.3 Практическая работа по уроку "Динамическая типизация"
#
# Цель: Написать программу на языке Python, используя Pycharm, для
# демонстрации динамической типизации.
#
# 1. В проекте, где вы решаете домашние задания, создайте модуль 'module_1_3.py'
# и напишите весь код в нём.
#
# 2. Создайте переменные разных типов данных:
#   - Создайте переменную name и присвойте ей значение вашего имени (строка).
#   - Выведите значение переменной name на экран.
#   - Создайте переменную age и присвойте ей значение вашего возраста (целое число).
#   - Выведите значение переменной age на экран.
#   - Перезапишите в age текущее значение переменной age + новое.
#
# Как неверно (просто перезапись на новое число):
#
# a = 15
# a = 17
#
#   - Выведите измененное значение переменной age на экран.
#   - Создайте переменную is_student и присвойте ей значение True
#   (логическое значение).
#   - Выведите значение переменной is_student на экран.
#
# Примечания:
#
# - Для вывода значений на экран используйте функцию print().
# - Обратите внимание на использование разных типов данных и возможности
# их изменения.
#
# Пример результата выполнения программы:
#
# Name: John
# Age: 25
# New Age: 26
# Is Student: True

name = 'Евгений'
print(f'Имя: {name}')
age = 46
print(f'Старый возраст: {age}')
age += 1
print(f'Новый возраст: {age}')
is_student = True
print(f'Являюсь студентом = {is_student}')

----------------------------------------------
# 1.4 Практическая работа по уроку "Организация программ и методы строк"
#
# Цель: Написать программу на языке Python с использованием Pycharm
# для работы с методами строк и организации программ.
#
# 1. В проекте, где вы решаете домашние задания, создайте модуль 'module_1_4.py'
# и напишите весь код в нём.
#
# 2. Организуйте программу:
# Создайте переменную my_string и присвойте ей значение строки с произвольным
# текстом (функция input()).
# Вывести количество символов введённого текста
#
# 3. Работа с методами строк:
#
# Используя методы строк, выполните следующие действия:
#
# Выведите строку my_string в верхнем регистре.
# Выведите строку my_string в нижнем регистре.
# Измените строку my_string, удалив все пробелы.
# Выведите первый символ строки my_string.
# Выведите последний символ строки my_string.
# Примечания:
#
# Для вывода значений на экран используйте функцию print().
# Для вызова методов строк используйте операцию точки '.'.
# Дополнительно о всех методах строк можно узнать здесь.
# Пример результата выполнения программы:
#
# Код:
# name = input()
# print(name.upper())
#
# Ввод в консоль:
# Urban
#
# Вывод на консоль:
# URBAN

my_string = input('Введите произвольный текст: ')
print()
length = len(my_string)
print(f'Количество знаков во введенном тексте: {length}')
print(f'Текст в верхнем регистре - "{my_string.upper()}"')
print(f'Текст в нижнем регистре - "{my_string.lower()}"')
print(f'Текст без пробелов - "{my_string.replace(" ", "")}"')
print(f'Первый символ текста - "{my_string[0]}"')
print(f'Последний символ текста - "{my_string[-1]}"')

----------------------------------------------
1.5 Кортежи

# Цель:
#
# Написать программу на языке Python, используя Pycharm, для работы с
# неизменяемыми и изменяемыми объектами.
#
# 1. В проекте, где вы решаете домашние задания, создайте модуль
# 'module_1_5.py' и напишите весь код в нём.
#
# 2. Задайте переменные разных типов данных:
#   - Создайте переменную immutable_var и присвойте ей кортеж из
#   нескольких элементов разных типов данных.
#   - Выполните операции вывода кортежа immutable_var на экран.
#
# 3. Изменение значений переменных:
#   - Попытайтесь изменить элементы кортежа immutable_var.
#   Объясните, почему нельзя изменить значения элементов кортежа.
#
# 4. Создание изменяемых структур данных:
#   - Создайте переменную mutable_list и присвойте ей список из
#    нескольких элементов.
#   - Измените элементы списка mutable_list.
#   - Выведите на экран измененный список mutable_list.
#
import copy

print('Задание 2\n')
immutable_var = 1, '1', 'string', [2, 'string_2'], (4, 5, [6, 'string_3'])
print(immutable_var)

print('\nЗадание 3\n')
new_immutable_var = copy.deepcopy(immutable_var)
new_string = immutable_var[3][1].replace('2', '222')
old_list = immutable_var[3]
new_immutable_var[3][1] = new_string
new_list = new_immutable_var[3]

print(f"Я не могу изменить в списке '{old_list}' кортежа строку '{old_list[1]}' на '{new_string}',\n"
      f"поскольку строки, числа и кортежи неизменяемые.\n\n"
      f"Зато я могу поменять сам список, заменив один элемент на другой\n"
      f"и теперь список выглядит так: '{new_immutable_var[3]}',\n"
      f"а весь кортеж выглядит так:\n"
      f"'{new_immutable_var}'\n\n"
      f"В процессе узнал/вспомнил про новый подводный камень - списки меняются во всех версиях кортежа\n"
      f"Копировать нужно с умом (copy.deepcopy)...")

print('\nЗадание 4\n')

mutable_list = [1, 'a', (2, 3), [4, 5], True]
print(f'Исходный список: {mutable_list}')

mutable_list[0] = 2
mutable_list[1] = mutable_list[1].upper()
mutable_list[2] = mutable_list[2] * 2
mutable_list[3][0], mutable_list[3][1] = mutable_list[3][1], mutable_list[3][0]
mutable_list[4] = not mutable_list[4]

print(f'Измененный список: {mutable_list}')

----------------------------------------------

----------------------------------------------

----------------------------------------------

----------------------------------------------

----------------------------------------------

----------------------------------------------

----------------------------------------------

----------------------------------------------

----------------------------------------------

----------------------------------------------

----------------------------------------------

