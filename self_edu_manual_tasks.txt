# Задание 10
# Напишите программу, которая:
#
# получает на вход целое число n – количество точек на плоскости;
# получает n строк с координатами x, y;
# определяет точку, наиболее удаленную от начала координат.

num = 5
my_tpl = tuple(tuple(map(int, input().split())) for _ in range(num))
mx = max(my_tpl, key=lambda x: x[0] ** 2 + x[1] ** 2)
print(mx)

-------------------------------------------

ПРАКТИКА ПО КОРТЕЖАМ

# Задание 1
# Напишите программу, которая:
#
# Создает кортежи из положительных и отрицательных целых чисел на основе
# полученной от пользователя строки.
# Выводит количество положительных и отрицательных чисел в этих кортежах.
# 45 -6 -9 43 23 5 2 -9 -1 6 3
my_input = '45 -6 -9 43 23 5 2 -9 -1 6 3'
pos = tuple(i for i in map(int, my_input.split()) if i > 0)
neg = tuple(i for i in map(int, my_input.split()) if i <= 0)
print(f'Кортеж {pos} состоит из {len(pos)} положительных чисел')
print(f'Кортеж {neg} состоит из {len(neg)} отрицательных чисел')

# Задание 2
# Напишите программу, которая:
#
# Создает кортеж из полученной от пользователя строки,
# состоящей из вещественных чисел, разделенных пробелами.
# Выводит минимальный и максимальный элементы кортежа, а также их сумму.
# 3.45 6.78 8.99 1.45 4.32 19.04 0.55

my_input = '3.45 6.78 8.99 1.45 4.32 19.04 0.55'
my_input = tuple(map(float, my_input.split()))
print(f'Минимальное число: {min(my_input)}')
print(f'Максимальное число: {max(my_input)}')
print(f'Сумма min и max: {(min(my_input) + max(my_input)):.2f}')

# Задание 3
# Имеется кортеж списков, в которых перечислены названия фруктов и калорийность:
# fruit = (['яблоки', 46], ['персики', 49], ['лимоны', 36], ['виноград', 190])
# Калорийность винограда указана ошибочно.
# Напишите программу, которая исправит калорийность на 75, и добавит в третий
# элемент кортежа новое значение ['айва', 42]. Результат должен выглядеть так:
# fruit = (
#     ['яблоки', 46], ['персики', 49], ['лимоны', 36, 'айва', 42], ['виноград', 75]
# )
fruit = (['яблоки', 46], ['персики', 49], ['лимоны', 36], ['виноград', 190])
fruit[3][1] = 75
fruit[2].extend(['айва', 42])
print(fruit)

# Задание 4
# Имеется вложенный кортеж:
# numbers = ((5, 4, 5, 4), (3, 3, 4, 6), (8, 9, 5, 4), (12, 4, 5, 1), (9, 3, 5, 1))
# Напишите программу, которая формирует новый кортеж, состоящий из средних
# арифметических значений элементов numbers.
# Результат выводится в следующем виде:
# 4.5 4.0 6.5 5.5 4.5

numbers = ((5, 4, 5, 4), (3, 3, 4, 6), (8, 9, 5, 4), (12, 4, 5, 1), (9, 3, 5, 1))
avg = tuple(sum(i) / len(i) for i in numbers)
print(*avg)

# Задание 5
# Имеется вложенный кортеж:
# nested_tuple = ((12, 3, 1), (5, 11), (15, 7, 8, 9), (10, 6, 4))
# Напишите программу для преобразования nested_tuple в обычный кортеж,
# упорядоченный по возрастанию:
# (1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15)

nested_tuple = ((12, 3, 1), (5, 11), (15, 7, 8, 9), (10, 6, 4))
new_tuple = tuple(i for j in nested_tuple for i in j)
print(sorted(new_tuple))

# ИЛИ:

nested_tuple = ((12, 3, 1), (5, 11), (15, 7, 8, 9), (10, 6, 4))
res = []
flat_list = [res.extend(i) for i in nested_tuple]
print(tuple(sorted(res)))

# Задание 6
# Напишите программу для сортировки вложенного кортежа по третьему элементу.
# Исходный кортеж:
# (('красный', 33, 55), ('зеленый', 17, 44), ('синий', 12, 3), ('черный', 2, 5))
# (('черный', 2, 5), ('синий', 12, 3), ('зеленый', 17, 44), ('красный', 33, 55))

my_tpl = (('красный', 33, 55), ('зеленый', 17, 44), ('синий', 12, 3), ('черный', 2, 5))
new_tpl = tuple(i for i in sorted(my_tpl, key=lambda x: x[2], reverse=False))
print(new_tpl)

# Задание 7
# Напишите программу, которая:
#
#1. принимает на вход строку, состоящую из цифр или символов, разделенных пробелами;
# 35 35 35 35 35
#2. создает из строки кортеж;
#3. проверяет, состоит ли кортеж из одинаковых элементов;
#4. выводит True или False в зависимости от результатов проверки.

# Для проверки соответствия всех элементов одному условию в Python
# используется встроенная функция all():
my_str = '35 35 35 35 35'
my_tuple = tuple(map(int, my_str.split()))
print(all(i == my_tuple[0] for i in my_tuple))

# Задание 8
# Напишите программу, которая на основе исходного кортежа создает новый кортеж,
# из которого исключены все пользователи с номерами телефонов
# с региональным кодом +56.
#
info = (('Евгений Романов', 25, '+56(983)354-67-21'),
    	('Марина Дятлова', 22, '+56(190)251-45-79'),
    	('Кирилл Кудрявцев', 34, '+7(890)456-12-42'),
    	('Сергей Дятлов', 24, '+56(190)156-42-99'),
    	('Юлия Степанова', 21, '+16(398)355-33-09'),
    	('Тимофей Иванов', 34, '+7(918)222-52-77'))

new_info = tuple(i for i in info if not i[2].startswith('+56'))
print(new_info)

# Задание 9
# Имеется кортеж списков:
# numbers = ([4, 5], [4, 5], [1, 6], [7, 3], [3, 3], [2, 4], [9, 5], [1, 1])
# Напишите программу, которая добавит цифру 5 в конец каждого списка.
numbers = ([4, 5], [4, 5], [1, 6], [7, 3], [3, 3], [2, 4], [9, 5], [1, 1])
add = [i.extend([5]) for i in numbers]
print(numbers)

# Задание 10
# Напишите программу, которая:
#
# получает на вход целое число n – количество точек на плоскости;
# получает n строк с координатами x, y;
# определяет точку, наиболее удаленную от начала координат.

num = 5
my_tpl = tuple(tuple(map(int, input().split())) for _ in range(num))
mx = max(my_tpl, key=lambda x: x[0] ** 2 + x[1] ** 2)
print(mx)

---------------------------------------------
# ПРАКТИКА ПО МНОЖЕСТВАМ
# Задание 1
# Напишите программу, которая получает на вход три слова и определяет,
# являются ли они анаграммами друг друга.

a, b, c = 'кластер', 'стрелка', 'сталкер'
# set_a, set_b, set_c = set(input()), set(input()), set(input())
set_a, set_b, set_c = set(a), set(b), set(c)
print('Да' if set_a == set_b == set_c else 'Нет')


# Задание 2
# Напишите программу, которая получает на вход две строки с перечислением интересов
# и хобби двух пользователей, и вычисляет процент совпадения.
# кино книги велосипед хоккей кулинария цветы кошки
# кошки кино путешествия футбол кулинария автомобили дайвинг
# Совпадение интересов: 27.27%

a = 'кино книги велосипед хоккей кулинария цветы кошки'.split()
b = 'кошки кино путешествия футбол кулинария автомобили дайвинг'.split()
set_a = set(a)
set_b = set(b)
my_inter = set_a.intersection(set_b)
print(f'Совпадение интересов: {len(my_inter) / len(set_a.union(set_b)) * 100:.2f}%')

# ИЛИ:

x = input().split()
y = input().split()
result = len(set(x) & set(y)) / float(len(set(x) | set(y))) * 100
print(f'Совпадение интересов: {result:.2f}%')


# Задание 3
# Напишите программу, которая получает на вход строку, и определяет,
# является ли строка панграммой (т.е. содержатся ли в ней все 33
# буквы русского алфавита).
# Широкая электрификация южных губерний даст мощный толчок подъёму сельского хозяйства

str_a = 'Широкая электрификация южных губерний даст мощный толчок подъёму сельского хозяйства'.lower()
set_a = {i for i in str_a if i.isalpha()}
print('Yes' if len(set_a) == 33 else 'no')


# Задание 4
# Напишите программу, которая получает n слов, и вычисляет
# количество уникальных символов во всех словах.
from functools import reduce

words = (
    'программа',
    'код',
    'компьютер',
    'монитор',
    'интерпретатор'
)
print('Количество уникальных символов во всех словах:',
      len(set(''.join([word.lower() for word in words]))))
# n = 5
# print('Количество уникальных символов во всех словах:',
# len(set(''.join([input().lower() for _ in range(n)]))))


# Задание 5
# Напишите программу, которая:
#
# Получает на вход две строки, в которых перечисляются книги,
# прочитанные двумя учениками.
# Выводит количество книг, которые прочитали оба ученика.
list_1 = 'Мастер и Маргарита, Война и мир, Тихий Дон, Евгений Онегин'.split(', ')
list_2 = 'Джейн Эйр, Террор, Война и мир, Мастер и Маргарита, Нос'.split(', ')
print(len(set(list_1) & set(list_2)))


# Задание 6
# Напишите программу, которая получает от пользователя две строки
# с числами, и выводит в порядке возрастания числа, встречающиеся
# в обеих строках.
def prepare(my_string: str):
    my_set = set(int(i) for i in my_string.split() if i.isdigit())
    return my_set


str_1 = '4 12 6 11 0 8 7 5 1 25'
str_2 = '2 1 4 5 56 6 8 7 14 33'
print(sorted(prepare(str_1) & prepare(str_2)))


# Задание 7
# Напишите программу, которая получает два числа и выводит Есть,
# если числа содержат общие цифры, и Нет в противном случае.
a, b = '5678', '3421'
print('Есть' if set(a) & set(b) else 'Нет')


# Задание 8
# Напишите программу, которая получает строку с именами файлов,
# и выводит уникальные имена .jpg файлов, отсортированные в алфавитном порядке.
files = (
    'book_cover.jpg cover.png Book_cover.jpg illustration.jpg ILLUSTRATION.JPG '
    'my_cover.png photo.gif award.jpg Award.jpg award.JPG'
).lower().split()
my_list = sorted(set(i for i in files if i.endswith('.jpg')))
print(*my_list, sep=', ')


# Задание 9
# Два дизайнера поспорили о том, кто из них знает больше оттенков цветов.
# Они перечисляют оттенки, но иногда забывают о том, что уже называли какой-то тон.
# Напишите программу, которая получает на вход n строк с названиями оттенков,
# и определяет, есть ли среди них повторы.
# Если повтор есть, нужно вывести Повтор, если нет – Принято.
num = int(input('Введите число: '))
colors = set(input('Введите цвет: ').lower() for _ in range(num))
print('Accepted' if len(colors) == num else 'Not accepted')



# Задание 10
# Кондитер собирается испечь торт. Напишите программу, которая поможет определить,
# имеются ли в кладовой все необходимые продукты:
#
# - Сначала программа получает список из m продуктов, которые есть в кладовой.
# - Затем получает n ингредиентов, необходимых для рецепта.
# - Выводит Есть, если ингредиент имеется в кладовой, и Отсутствует в противном случае.
# 6
# 5
# мука
# сахар
# Сода
# яйца
# масло сливочное
# масло растительное
# Сахар
# Мука
# Яйца
# сливки
# масло сливочное

m, n = [int(input('Число ')) for _ in 'mn']
pantry = {input('Есть продукт ').lower() for _ in range(m)}
[print('Есть' if input('Нужен продукт ').lower() in pantry else 'Отсутствует') for _ in range(n)]

---------------------------------------------
# ЦИКЛ FOR

# Задание 1
# Напишите программу, которая получает от пользователя число n и выводит n
# строк с результатом умножения чисел от 1 до n на символ *.
n = int(input('Enter number: '))
for i in range(1, n + 1):
    print(f'Умножаю * на {i}: {"*" * (i)}')

# Умножаю * на 1: *
# Умножаю * на 2: **
# Умножаю * на 3: ***
# Умножаю * на 4: ****


lst = map(int, input().split())
pos = 0
negs = 1
min_num = 0
max_num = 0
for i in lst:
    if i > 0:
        pos += 1
    elif i < 0:
        negs *= i
    if i < min_num:
        min_num = i
    elif i > max_num:
        max_num = i
print(f'Количество положительных чисел: {pos}')
print(f'Произведение отрицательных чисел: {negs}')
print(f'Минимальное число: {min_num}')
print(f'Максимальное число: {max_num}')


# Задание 3
# Напишите программу, которая создает вложенный список из n строк,
# полученных от пользователя, и выводит сумму и произведение элементов
# каждого подсписка (без использования sum() и math.prod()).
user_numbers = [
    '4 5 6 7 8',
    '2 1 3 9 8',
    '6 4 3 2 6',
    '9 7 6 3 2',
    '1 4 5 7 2',
    '7 3 2 1 6'
]

num = 6
matrix = []
for i in range(num):
    matrix.append(list(map(int, user_numbers[i].split())))

grand_summ = 0
grand_mult = 1

for i in range(len(matrix)):
    for j in matrix[i]:
        grand_summ += j
        grand_mult *= j
    print(f'Подсписок {i}: сумма чисел = {grand_summ}, произведение = {grand_mult}')

# ИЛИ:

n = int(input())
lst = []
for i in range(n):
    lst.append(list(map(int, input().split())))

summa = 0
prod = 1
for i, j in enumerate(lst):
    for num in j:
        summa += num
        prod *= num
    print(f'Подсписок {i}: сумма чисел = {summa}, произведение = {prod}')


# Задание 4
# Напишите программу, которая получает от пользователя строку текста
# и число n, а затем выводит вложенный список, в котором n последовательных
# элементов принадлежат разным подспискам.
string = 'абвгдеёжз'
num = 3
matrix = []
count = 0

for i in range(num):
    matrix.append([])
    for j in range(count, len(string), num):
        matrix[i].append(string[j])
    count += 1

[print(*matrix[i]) for i in range(len(matrix))]

# ИЛИ:

string = list(input())
num = int(input())
matrix = []

for i in range(num):
    matrix.append(string[i::num])
print(matrix)


# Задание 5
# Напишите программу для транспонирования квадратной матрицы.
# 5
# 1 2 3 4 5
# 1 2 3 4 5
# 1 2 3 4 5
# 1 2 3 4 5
# 1 2 3 4 5
#
# 1 1 1 1 1
# 2 2 2 2 2
# 3 3 3 3 3
# 4 4 4 4 4
# 5 5 5 5 5

num: int = 5
matrix = ['1 2 3 4 5'.split() for _ in range(num)]
[print(*i) for i in matrix]
print()

for i in range(num):
    for j in range(i, num):
        matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]
for i in matrix:
    print(*i)


# Задание 6
# Напишите программу, которая выводит на экран снежинку размера n x n.
# Элементы снежинки состоят из символов *, фон – из точек.
# * . * . *
# . * * * .
# * * * * *
# . * * * .
# * . * . *


n = int(input())
snowflake = [['.'] * n for _ in range(n)]

for i in range(n):
    for j in range(n):
        if i == n // 2 or j == n // 2:
            snowflake[i][j] = '*'
        elif i == j or i + j + 1 == n:
            snowflake[i][j] = '*'


[print(*line) for line in snowflake]



# Задание 7
# Напишите программу, которая:
#
# создает квадратную матрицу из полученных на вход строк;
# проверяет, является ли матрица симметричной относительно побочной диагонали;
# выводит Да или Нет в зависимости от результата.
# 4
# 1 2 3 1
# 2 2 2 3
# 3 3 2 2
# 4 3 2 1
num = int(input('Введите число: '))
matrix = [input('введите строку чисел: ') for _ in range(num)]

[print(*i) for i in matrix]

ans = 'Да'
for i in range(num - 1):
    for j in range(num - i - 1):
        if matrix[i][j] != matrix[num - j - 1][num - i - 1]:
            ans = 'Нет'
            break
    if ans == 'Нет':
        break
print(ans)



# Задание 8
# Напишите программу, которая получает от пользователя число
# 1 <= n <= 9, и выводит таблицу умножения для всех чисел от 1 до n.

num = int(input('введите число: '))
for i in range(1, num + 1):
    for j in range(1, 10):
        print(f'{i} * {j} = {i * j}')
    print()



# Задание 9
# Напишите программу, которая получает на вход нечетное положительное
# число n, и выводит треугольник, указывающий вправо.
# *
# **
# ***
# ****
# *****
# ******
# *****
# ****
# ***
# **
# *

# num = int(input('введите число: '))
num = 11
for i in range(1, num // 2 + 2):
    print('*' * i, sep='\n')
for i in range(num // 2, 0, -1):
    print('*' * i)


# Задание 10
# Напишите программу, которая:
#
# получает на вход x и y координаты n точек;
# подсчитывает количество точек в каждой из координатных четвертей.
# Примечание: к четвертям не относят точки, лежащие
# непосредственно на координатных осях X и Y.
# 8
# -4 1
# 3 6
# 7 -9
# -1 -10
# 15 5
# -12 15
# 11 17
# -10 1
#
# Первая четверть: 3
# Вторая четверть: 3
# Третья четверть: 1
# Четвертая четверть: 1

q_1, q_2, q_3, q_4 = 0, 0, 0, 0
for _ in range(int(input('Введите число: '))):
    x, y = [int(i) for i in input('Введите координаты: ').split()]
    if int(x) > 0 and int(y) > 0:
        q_1 += 1
    elif int(x) < 0 and int(y) > 0:
        q_2 += 1
    elif int(x) < 0 and int(y) < 0:
        q_3 += 1
    elif int(x) > 0 and int(y) < 0:
        q_4 += 1

print(
    f'Первая четверть: {q_1}',
    f'Вторая четверть: {q_2}',
    f'Третья четверть: {q_3}',
    f'Четвертая четверть: {q_4}',
    sep='\n'
)
---------------------------------------------
# ПРАКТИКА ЦИКЛА WHILE

# Задание 1
# Напишите программу, которая принимает на вход целые числа и вычисляет
# их сумму, пока пользователь не введет 0.

import random

summa = 0

while True:
    num = random.randint(0, 10)
    if num == 0:
        break
    summa += num

print(summa)


# Задание 2
# Напишите программу, которая получает от пользователя число n > 100,
# и вычисляет (без использования методов строк) произведение цифр,
# из которых n состоит.

num = 335
prod = 1

while num > 1:
    prod *= num % 10
    num //= 10

print(prod)


# Задание 4
# Напишите программу, которая составляет строку из полученных от
# пользователя слов, пока длина строки не достигнет 50 символов.
# Слова, начинающиеся с гласных, в строку не включаются.

vowels = 'аеёиоуыэюя'
string = ''

while len(string) < 50:
    word = input()
    if word[0] not in vowels:
        continue
    string += word + ' '

print(string)


# Задание 5
# Напишите программу для конвертации числа из десятичного системы
# в двоичную без использования функции bin().

num = int(input())
result = ''
while num > 0:
    result = str(num % 2) + result
    num = num // 2
print(result)


# Задание 6
# Напишите программу, которая получает на вход число и без использования
# строковых методов переставляет цифры в обратном порядке.

num = 123456789
new_num = ''

while num:
    x = str(num % 10)
    new_num += x
    num //= 10

print(int(new_num))

# ИЛИ:

num = 123456789
rev = 0
while num!= 0:
    r = num % 10
    rev = rev * 10 + r
    num = num // 10
print(rev)


# Задание 7
# Напишите программу для вычисления факториала числа n без
# использования функции math.factorial().

num = int(input())
fact = 1

while num > 1:
    fact *= num
    num -= 1
print(fact)


# Задание 8
# Напишите программу, которая получает от пользователя число n и
# определяет, является ли оно простым, или у него есть делители,
# кроме 1 и самого себя.

num = int(input())
i = 2
flag = True

while i < num // 2 + 1:
    if num % i == 0:
        flag = False
        print(f'{num} делится на {i}')
    i += 1

print(f'{num} является простым числом' if flag else
      f'Таким образом, {num} не является простым числом')


# Задание 9
# Напишите программу, использующую вложенный цикл while для вывода
# треугольника размером n x n х n, состоящего из символов*.

num = 6
i, j = 0, 0
while i < num:
    while j <= i:
        print('*', end='')
        j += 1
    j = 0
    i += 1
    print()


# Задание 10
# Напишите программу для запоминания английских названий месяцев:
#
# 1. Русские названия месяцев выводятся в случайном порядке с
# помощью метода random.shuffle().
#
# 2. Пользователь получает три попытки для написания правильного названия на английском.
#
# 3. После трех неверных попыток программа переходит к другому слову.

import random

correct, wrong, attempts = 0, 0, 3
months = {'январь': 'January', 'февраль': 'February', 'март': 'March',
          'апрель': 'April', 'май': 'May', 'июнь': 'June',
          'июль': 'July', 'август': 'August', 'сентябрь': 'September',
          'октябрь': 'October', 'ноябрь': 'November', 'декабрь': 'December'}
rand_keys = list(months.keys())
random.shuffle(rand_keys)

for key in rand_keys:
    counter = 0
    while counter < attempts:
        spelling = input(f'Месяц {key} по-английски называется: ')
        if spelling.title() == months[key]:
            correct += 1
            break
        else:
            counter += 1
            wrong += 1
            print(f'Неверно! Осталось попыток: {attempts - counter}')
    else:
        print(f'Попытки исчерпаны!')

print('Конец игры')
print(f'Количество правильных ответов: {correct}')
print(f'Число ошибок: {wrong}')

---------------------------------------------
# ПРАКТИКА ФУНКЦИИ

# Задание 1
# Напишите функцию для вывода треугольника.
# Функция принимает два аргумента – size (размер сторон треугольника)
# и symb (символ, используемый для заполнения треугольника).

def print_triangle(size, symb):
    x = size // 2
    for i in range(x + 1):
        print(symb * i)
    for i in range(x + 1,0,-1):
        print(symb * i)


print_triangle(9, '.')

# ИЛИ:

def draw_triangle(size, symb):
    for i in range(1, size + 1):
        print(symb * max(i, size - i + 1))

size, symb = 9, '.'
draw_triangle(size, symb)


# Задание 2
# Напишите функцию, которая принимает произвольное количество целых чисел,
# и возвращает среднее арифметическое без использования встроенных
# функции sum() и len().
def arith_mean(*args):
    count = 0
    summa = 0
    for i in args:
        count += 1
        summa += i
    return summa / count

print(arith_mean(5, 5, 15, 25, 35))


# Задание 3
# Напишите функцию, которая:
#
# принимает строку, состоящую из букв, цифр и специальных символов;
# формирует три списка – 1) из цифр, 2) из букв, 3) из спецсимволов;
# выводит списки на экран.
def make_lists(string):
    digits = [i for i in string if i.isdigit()]
    letters = [i for i in string if i.isalpha()]
    symbols = [i for i in string if not i.isalnum()]
    return digits, letters, symbols


my_str = '23edwd893rjf934#$%Ye34F^(*))_+W$#Ddq2ddscew3r'
for i in make_lists(my_str):
    print(*i)


# Задание 4
# Напишите функцию, которая начисляет новогодние премии сотрудникам. Эта функция:
#
# имеет два аргумента по умолчанию – salary=120000 и bonus=10 (оклад и премия);
# получает два позиционных аргумента name и last_name – имя и фамилию сотрудника;
# учитывает индивидуальные оклад и премию (см. примеры вызова);
# выводит размер новогодней премии для сотрудника и зарплату с учетом премии.
def ny_bonus(name, last_name, salary=120000, bonus=10):
    calc_bonus = salary * bonus / 100
    text = f'Новогодняя премия сотрудника {name} {last_name}: {calc_bonus:.2f} руб.\n' \
           f'Оклад: {salary:.2f} руб.\n' \
           f'Всего к выдаче: {salary + calc_bonus:.2f} руб.\n'
    print(text)


ny_bonus('Алина', 'Тимофеева', salary=150000, bonus=25)
ny_bonus('Алексей', 'Ковалев', bonus=15)
ny_bonus('Игорь', 'Ефимов')
ny_bonus('Анастасия', 'Яковлева', salary=100000, bonus=20)


# Задание 5
# Напишите программу, которая выводит Есть, если в полученной от пользователя
# строке есть хотя бы одно совершенное число, равное сумме своих делителей,
# и Нет в обратном случае.

def perfect_num(string):
    my_list = list(map(int, string.split()))
    nested_list = []

    for i in range(len(my_list)):
        nested_list.append([])
        for j in range(1, my_list[i] // 2 + 1):
            if my_list[i] % j == 0:
                nested_list[i].append(j)

    print(nested_list)
    for i in range(len(nested_list)):
        if sum(nested_list[i]) == my_list[i]:
            return True
    return False

my_str = '5 7 8 9 34 28'
print('Есть' if perfect_num(my_str) else 'Нет')

# ИЛИ:

def perfect_number(n):
    sum = 0
    for i in range(1, n):
        if n % i == 0:
            sum += i
    return sum == n


my_input = '5 7 8 9 34 28'
numbers = list(map(int, my_input.split()))
flag = 'Нет'
for i in numbers:
    if perfect_number(i):
        flag = 'Есть'
        break
print(flag)


# Задание 6
# Напишите функцию, которая принимает два позиционных аргумента –
# натуральные числа n и k, и возвращает значение биномиального
# коэффициента, не используя math.factorial().

def factorial(num):
    if num <= 1:
        return 1
    return num * factorial(num - 1)

def binomial_coeff(n, k):
    return int(factorial(n) / (factorial(k) * factorial(n - k)))

n, k = 12, 5
print(binomial_coeff(n, k))


# Задание 7
# Напишите функцию, которая принимает число от 1 до 99,
# и возвращает его словесное описание.

def spell_number(num):
    ed = ['один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь', 'девять', 'десять',
          'одиннадцать', 'двенадцать', 'тринадцать', 'четырнадцать', 'пятнадцать', 'шестнадцать',
          'семнадцать', 'восемнадцать', 'девятнадцать']
    des = ['двадцать', 'тридцать', 'сорок', 'пятьдесят', 'шестьдесят', 'семьдесят', 'восемьдесят', 'девяносто']
    if num < 20:
        return ed[num - 1]
    elif num >= 20:
        if str(num)[1] != '0':
            return des[int(str(num)[0]) - 2] + ' ' + ed[int(str(num)[1]) - 1]
    return des[int(str(num)[0]) - 2]

n = int(input())
print(spell_number(n))


# Задание 8
# Напишите функцию, которая возвращает True, если введенная пользователем дата
# является магической, и False в обратном случае.
# Магической считается дата, в которой произведение дня и месяца равно двум
# последним цифрам года: 02.11.2022.


def convert(string):
    return list(map(int, string.split('.')))


def last_two_digits(integer):
    return int(str(integer)[-2:])


def magic_number(string):
    my_list = convert(string)
    return my_list[0] * my_list[1] == last_two_digits(my_list[2])


my_input = '03.06.2018'
print(magic_number(my_input))

# ИЛИ:

def magic_date(date):
    return int(date[:2]) * int(date[3:5]) == int(date[-2:])

date = input()
print(magic_date(date))


# Задание 9
# Напишите функцию, которая принимает произвольное количество именованных
# аргументов, и формирует из них строку запроса.
# Аргументы в строке запроса должны быть отсортированы в алфавитном порядке.
def make_query(**kwargs):
    string = ''
    my_list = sorted(kwargs)
    for i in range(len(my_list)):
        if i < len(my_list) - 1:
            string += str(my_list[i]) + '=' + str(kwargs[my_list[i]]) + '&'
        else:
            string += str(my_list[i]) + '=' + str(kwargs[my_list[i]])
    return string

# ИЛИ:

def make_query(**kwargs):
    return '&'.join([f'{k}={kwargs[k]}' for k in sorted(kwargs)])


print(make_query(category='books', genre='thriller', author='Stephen_King'))
print(make_query(name='Егор', last_name='Тимохин', age=25, occupation='дизайнер'))


# Задание 10
# Напишите функцию, которая принимает целое число n, и выводит на экран
# спиральную матрицу размера n x n, все элементы которой выровнены по левому краю.

def print_matrix(n):
    matrix = [[0] * n for _ in range(n)]
    vx, vy = [0, 1, 0, -1], [1, 0, -1, 0]
    x, y, z = 0, -1, 1
    for i in range(n + n - 1):
        for j in range((n + n - i) // 2):
            x += vx[i % 4]
            y += vy[i % 4]
            matrix[x][y] = z
            z += 1
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            print(str(matrix[i][j]).ljust(3), end='')
        print()

print_matrix(5)

# 1  2  3  4  5
# 16 17 18 19 6
# 15 24 25 20 7
# 14 23 22 21 8
# 13 12 11 10 9
---------------------------------------------

---------------------------------------------

---------------------------------------------

---------------------------------------------

---------------------------------------------

---------------------------------------------

---------------------------------------------