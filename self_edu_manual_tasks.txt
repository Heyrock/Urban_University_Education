# Задание 10
# Напишите программу, которая:
#
# получает на вход целое число n – количество точек на плоскости;
# получает n строк с координатами x, y;
# определяет точку, наиболее удаленную от начала координат.

num = 5
my_tpl = tuple(tuple(map(int, input().split())) for _ in range(num))
mx = max(my_tpl, key=lambda x: x[0] ** 2 + x[1] ** 2)
print(mx)

-------------------------------------------

ПРАКТИКА ПО КОРТЕЖАМ

# Задание 1
# Напишите программу, которая:
#
# Создает кортежи из положительных и отрицательных целых чисел на основе
# полученной от пользователя строки.
# Выводит количество положительных и отрицательных чисел в этих кортежах.
# 45 -6 -9 43 23 5 2 -9 -1 6 3
my_input = '45 -6 -9 43 23 5 2 -9 -1 6 3'
pos = tuple(i for i in map(int, my_input.split()) if i > 0)
neg = tuple(i for i in map(int, my_input.split()) if i <= 0)
print(f'Кортеж {pos} состоит из {len(pos)} положительных чисел')
print(f'Кортеж {neg} состоит из {len(neg)} отрицательных чисел')

# Задание 2
# Напишите программу, которая:
#
# Создает кортеж из полученной от пользователя строки,
# состоящей из вещественных чисел, разделенных пробелами.
# Выводит минимальный и максимальный элементы кортежа, а также их сумму.
# 3.45 6.78 8.99 1.45 4.32 19.04 0.55

my_input = '3.45 6.78 8.99 1.45 4.32 19.04 0.55'
my_input = tuple(map(float, my_input.split()))
print(f'Минимальное число: {min(my_input)}')
print(f'Максимальное число: {max(my_input)}')
print(f'Сумма min и max: {(min(my_input) + max(my_input)):.2f}')

# Задание 3
# Имеется кортеж списков, в которых перечислены названия фруктов и калорийность:
# fruit = (['яблоки', 46], ['персики', 49], ['лимоны', 36], ['виноград', 190])
# Калорийность винограда указана ошибочно.
# Напишите программу, которая исправит калорийность на 75, и добавит в третий
# элемент кортежа новое значение ['айва', 42]. Результат должен выглядеть так:
# fruit = (
#     ['яблоки', 46], ['персики', 49], ['лимоны', 36, 'айва', 42], ['виноград', 75]
# )
fruit = (['яблоки', 46], ['персики', 49], ['лимоны', 36], ['виноград', 190])
fruit[3][1] = 75
fruit[2].extend(['айва', 42])
print(fruit)

# Задание 4
# Имеется вложенный кортеж:
# numbers = ((5, 4, 5, 4), (3, 3, 4, 6), (8, 9, 5, 4), (12, 4, 5, 1), (9, 3, 5, 1))
# Напишите программу, которая формирует новый кортеж, состоящий из средних
# арифметических значений элементов numbers.
# Результат выводится в следующем виде:
# 4.5 4.0 6.5 5.5 4.5

numbers = ((5, 4, 5, 4), (3, 3, 4, 6), (8, 9, 5, 4), (12, 4, 5, 1), (9, 3, 5, 1))
avg = tuple(sum(i) / len(i) for i in numbers)
print(*avg)

# Задание 5
# Имеется вложенный кортеж:
# nested_tuple = ((12, 3, 1), (5, 11), (15, 7, 8, 9), (10, 6, 4))
# Напишите программу для преобразования nested_tuple в обычный кортеж,
# упорядоченный по возрастанию:
# (1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15)

nested_tuple = ((12, 3, 1), (5, 11), (15, 7, 8, 9), (10, 6, 4))
new_tuple = tuple(i for j in nested_tuple for i in j)
print(sorted(new_tuple))

# ИЛИ:

nested_tuple = ((12, 3, 1), (5, 11), (15, 7, 8, 9), (10, 6, 4))
res = []
flat_list = [res.extend(i) for i in nested_tuple]
print(tuple(sorted(res)))

# Задание 6
# Напишите программу для сортировки вложенного кортежа по третьему элементу.
# Исходный кортеж:
# (('красный', 33, 55), ('зеленый', 17, 44), ('синий', 12, 3), ('черный', 2, 5))
# (('черный', 2, 5), ('синий', 12, 3), ('зеленый', 17, 44), ('красный', 33, 55))

my_tpl = (('красный', 33, 55), ('зеленый', 17, 44), ('синий', 12, 3), ('черный', 2, 5))
new_tpl = tuple(i for i in sorted(my_tpl, key=lambda x: x[2], reverse=False))
print(new_tpl)

# Задание 7
# Напишите программу, которая:
#
#1. принимает на вход строку, состоящую из цифр или символов, разделенных пробелами;
# 35 35 35 35 35
#2. создает из строки кортеж;
#3. проверяет, состоит ли кортеж из одинаковых элементов;
#4. выводит True или False в зависимости от результатов проверки.

# Для проверки соответствия всех элементов одному условию в Python
# используется встроенная функция all():
my_str = '35 35 35 35 35'
my_tuple = tuple(map(int, my_str.split()))
print(all(i == my_tuple[0] for i in my_tuple))

# Задание 8
# Напишите программу, которая на основе исходного кортежа создает новый кортеж,
# из которого исключены все пользователи с номерами телефонов
# с региональным кодом +56.
#
info = (('Евгений Романов', 25, '+56(983)354-67-21'),
    	('Марина Дятлова', 22, '+56(190)251-45-79'),
    	('Кирилл Кудрявцев', 34, '+7(890)456-12-42'),
    	('Сергей Дятлов', 24, '+56(190)156-42-99'),
    	('Юлия Степанова', 21, '+16(398)355-33-09'),
    	('Тимофей Иванов', 34, '+7(918)222-52-77'))

new_info = tuple(i for i in info if not i[2].startswith('+56'))
print(new_info)

# Задание 9
# Имеется кортеж списков:
# numbers = ([4, 5], [4, 5], [1, 6], [7, 3], [3, 3], [2, 4], [9, 5], [1, 1])
# Напишите программу, которая добавит цифру 5 в конец каждого списка.
numbers = ([4, 5], [4, 5], [1, 6], [7, 3], [3, 3], [2, 4], [9, 5], [1, 1])
add = [i.extend([5]) for i in numbers]
print(numbers)

# Задание 10
# Напишите программу, которая:
#
# получает на вход целое число n – количество точек на плоскости;
# получает n строк с координатами x, y;
# определяет точку, наиболее удаленную от начала координат.

num = 5
my_tpl = tuple(tuple(map(int, input().split())) for _ in range(num))
mx = max(my_tpl, key=lambda x: x[0] ** 2 + x[1] ** 2)
print(mx)

---------------------------------------------
# ПРАКТИКА ПО МНОЖЕСТВАМ
# Задание 1
# Напишите программу, которая получает на вход три слова и определяет,
# являются ли они анаграммами друг друга.

a, b, c = 'кластер', 'стрелка', 'сталкер'
# set_a, set_b, set_c = set(input()), set(input()), set(input())
set_a, set_b, set_c = set(a), set(b), set(c)
print('Да' if set_a == set_b == set_c else 'Нет')


# Задание 2
# Напишите программу, которая получает на вход две строки с перечислением интересов
# и хобби двух пользователей, и вычисляет процент совпадения.
# кино книги велосипед хоккей кулинария цветы кошки
# кошки кино путешествия футбол кулинария автомобили дайвинг
# Совпадение интересов: 27.27%

a = 'кино книги велосипед хоккей кулинария цветы кошки'.split()
b = 'кошки кино путешествия футбол кулинария автомобили дайвинг'.split()
set_a = set(a)
set_b = set(b)
my_inter = set_a.intersection(set_b)
print(f'Совпадение интересов: {len(my_inter) / len(set_a.union(set_b)) * 100:.2f}%')

# ИЛИ:

x = input().split()
y = input().split()
result = len(set(x) & set(y)) / float(len(set(x) | set(y))) * 100
print(f'Совпадение интересов: {result:.2f}%')


# Задание 3
# Напишите программу, которая получает на вход строку, и определяет,
# является ли строка панграммой (т.е. содержатся ли в ней все 33
# буквы русского алфавита).
# Широкая электрификация южных губерний даст мощный толчок подъёму сельского хозяйства

str_a = 'Широкая электрификация южных губерний даст мощный толчок подъёму сельского хозяйства'.lower()
set_a = {i for i in str_a if i.isalpha()}
print('Yes' if len(set_a) == 33 else 'no')


# Задание 4
# Напишите программу, которая получает n слов, и вычисляет
# количество уникальных символов во всех словах.
from functools import reduce

words = (
    'программа',
    'код',
    'компьютер',
    'монитор',
    'интерпретатор'
)
print('Количество уникальных символов во всех словах:',
      len(set(''.join([word.lower() for word in words]))))
# n = 5
# print('Количество уникальных символов во всех словах:',
# len(set(''.join([input().lower() for _ in range(n)]))))


# Задание 5
# Напишите программу, которая:
#
# Получает на вход две строки, в которых перечисляются книги,
# прочитанные двумя учениками.
# Выводит количество книг, которые прочитали оба ученика.
list_1 = 'Мастер и Маргарита, Война и мир, Тихий Дон, Евгений Онегин'.split(', ')
list_2 = 'Джейн Эйр, Террор, Война и мир, Мастер и Маргарита, Нос'.split(', ')
print(len(set(list_1) & set(list_2)))


# Задание 6
# Напишите программу, которая получает от пользователя две строки
# с числами, и выводит в порядке возрастания числа, встречающиеся
# в обеих строках.
def prepare(my_string: str):
    my_set = set(int(i) for i in my_string.split() if i.isdigit())
    return my_set


str_1 = '4 12 6 11 0 8 7 5 1 25'
str_2 = '2 1 4 5 56 6 8 7 14 33'
print(sorted(prepare(str_1) & prepare(str_2)))


# Задание 7
# Напишите программу, которая получает два числа и выводит Есть,
# если числа содержат общие цифры, и Нет в противном случае.
a, b = '5678', '3421'
print('Есть' if set(a) & set(b) else 'Нет')


# Задание 8
# Напишите программу, которая получает строку с именами файлов,
# и выводит уникальные имена .jpg файлов, отсортированные в алфавитном порядке.
files = (
    'book_cover.jpg cover.png Book_cover.jpg illustration.jpg ILLUSTRATION.JPG '
    'my_cover.png photo.gif award.jpg Award.jpg award.JPG'
).lower().split()
my_list = sorted(set(i for i in files if i.endswith('.jpg')))
print(*my_list, sep=', ')


# Задание 9
# Два дизайнера поспорили о том, кто из них знает больше оттенков цветов.
# Они перечисляют оттенки, но иногда забывают о том, что уже называли какой-то тон.
# Напишите программу, которая получает на вход n строк с названиями оттенков,
# и определяет, есть ли среди них повторы.
# Если повтор есть, нужно вывести Повтор, если нет – Принято.
num = int(input('Введите число: '))
colors = set(input('Введите цвет: ').lower() for _ in range(num))
print('Accepted' if len(colors) == num else 'Not accepted')



# Задание 10
# Кондитер собирается испечь торт. Напишите программу, которая поможет определить,
# имеются ли в кладовой все необходимые продукты:
#
# - Сначала программа получает список из m продуктов, которые есть в кладовой.
# - Затем получает n ингредиентов, необходимых для рецепта.
# - Выводит Есть, если ингредиент имеется в кладовой, и Отсутствует в противном случае.
# 6
# 5
# мука
# сахар
# Сода
# яйца
# масло сливочное
# масло растительное
# Сахар
# Мука
# Яйца
# сливки
# масло сливочное

m, n = [int(input('Число ')) for _ in 'mn']
pantry = {input('Есть продукт ').lower() for _ in range(m)}
[print('Есть' if input('Нужен продукт ').lower() in pantry else 'Отсутствует') for _ in range(n)]

---------------------------------------------
# ЦИКЛ FOR

# Задание 1
# Напишите программу, которая получает от пользователя число n и выводит n
# строк с результатом умножения чисел от 1 до n на символ *.
n = int(input('Enter number: '))
for i in range(1, n + 1):
    print(f'Умножаю * на {i}: {"*" * (i)}')

# Умножаю * на 1: *
# Умножаю * на 2: **
# Умножаю * на 3: ***
# Умножаю * на 4: ****


lst = map(int, input().split())
pos = 0
negs = 1
min_num = 0
max_num = 0
for i in lst:
    if i > 0:
        pos += 1
    elif i < 0:
        negs *= i
    if i < min_num:
        min_num = i
    elif i > max_num:
        max_num = i
print(f'Количество положительных чисел: {pos}')
print(f'Произведение отрицательных чисел: {negs}')
print(f'Минимальное число: {min_num}')
print(f'Максимальное число: {max_num}')


# Задание 3
# Напишите программу, которая создает вложенный список из n строк,
# полученных от пользователя, и выводит сумму и произведение элементов
# каждого подсписка (без использования sum() и math.prod()).
user_numbers = [
    '4 5 6 7 8',
    '2 1 3 9 8',
    '6 4 3 2 6',
    '9 7 6 3 2',
    '1 4 5 7 2',
    '7 3 2 1 6'
]

num = 6
matrix = []
for i in range(num):
    matrix.append(list(map(int, user_numbers[i].split())))

grand_summ = 0
grand_mult = 1

for i in range(len(matrix)):
    for j in matrix[i]:
        grand_summ += j
        grand_mult *= j
    print(f'Подсписок {i}: сумма чисел = {grand_summ}, произведение = {grand_mult}')

# ИЛИ:

n = int(input())
lst = []
for i in range(n):
    lst.append(list(map(int, input().split())))

summa = 0
prod = 1
for i, j in enumerate(lst):
    for num in j:
        summa += num
        prod *= num
    print(f'Подсписок {i}: сумма чисел = {summa}, произведение = {prod}')


# Задание 4
# Напишите программу, которая получает от пользователя строку текста
# и число n, а затем выводит вложенный список, в котором n последовательных
# элементов принадлежат разным подспискам.
string = 'абвгдеёжз'
num = 3
matrix = []
count = 0

for i in range(num):
    matrix.append([])
    for j in range(count, len(string), num):
        matrix[i].append(string[j])
    count += 1

[print(*matrix[i]) for i in range(len(matrix))]

# ИЛИ:

string = list(input())
num = int(input())
matrix = []

for i in range(num):
    matrix.append(string[i::num])
print(matrix)



---------------------------------------------

---------------------------------------------


---------------------------------------------

---------------------------------------------

---------------------------------------------

---------------------------------------------

---------------------------------------------

---------------------------------------------

---------------------------------------------